{"version":3,"sources":["bibliotheca/events.cljs"],"mappings":"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","names":["bibliotheca.events/default-db","bibliotheca.events/text-contains?","text","search","and__4996__auto__","bibliotheca.events/matches-search?","item","search-term","cljs.core/empty?","or__4998__auto__","bibliotheca.events/matches-filters?","filters","map__39089","cljs.core/--destructure-map","cljs.core.get","media-type","author","tags","item-tags","cljs.core._EQ_","p1__39088#","cljs.core/some","bibliotheca.events/apply-filters","db","media-data","filtered-data","cljs.core/every?","cljs.core/vals","p1__39090#","cljs.core.filter","cljs.core.assoc","bibliotheca.events/apply-sort","sort-field","cljs.core.get_in","sort-direction","sort-fn","cljs.core/identity","cljs.core/reverse","sorted-data","G__39091","cljs.core.sort_by","re_frame.core.reg_event_db","_","re_frame.core.reg_event_fx","p__39092","map__39093","ajax.core/text-response-format","p__39094","vec__39095","cljs.core.nth","response","e39098","js/jsyaml","parsed-data","cljs.core.js__GT_clj","js/jsyaml.load","bibliotheca.schema/validate-media-library","cljs.core.dissoc","js/Error","e","p__39099","vec__39100","error","p__39103","vec__39104","new-db","cljs.core/assoc-in","p__39107","vec__39108","p__39111","vec__39112","p__39117","vec__39118","tag","current-tags","new-tags","p1__39115#","p1__39116#","cljs.core.remove","cljs.core.conj","p__39121","vec__39122","field","current-field","current-direction","new-direction","p__39125","vec__39126","mode"],"sourcesContent":["(ns bibliotheca.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [cljs.reader :as reader]\n            [bibliotheca.schema :as schema]))\n\n;; Initial database state\n(def default-db\n  {:media-data []\n   :filtered-data []\n   :loading? true\n   :error nil\n   :filters {:search \"\"\n             :media-type \"\"\n             :author \"\"\n             :tags []\n             :year-min nil\n             :year-max nil}\n   :sort {:field :title\n          :direction :asc}\n   :view-mode :table})\n\n;; Helper functions\n(defn- text-contains? [text search]\n  (when (and text search)\n    (.includes (.toLowerCase (str text)) (.toLowerCase search))))\n\n(defn- matches-search? [item search-term]\n  (when-not (empty? search-term)\n    (or (text-contains? (:title item) search-term)\n        (text-contains? (:author item) search-term)\n        (text-contains? (:summary item) search-term)\n        (text-contains? (:whyRecommended item) search-term))))\n\n(defn- matches-filters? [item filters]\n  (let [{:keys [search media-type author tags]} filters\n        item-tags (or (:tags item) [])]\n    (and (or (empty? search) (matches-search? item search))\n         (or (empty? media-type) (= (:mediaType item) media-type))\n         (or (empty? author) (text-contains? (:author item) author))\n         (or (empty? tags) (some #(some #{%} item-tags) tags)))))\n\n(defn- apply-filters [db]\n  (let [media-data (:media-data db)\n        filters (:filters db)\n        filtered-data (if (every? empty? (vals filters))\n                        media-data\n                        (filter #(matches-filters? % filters) media-data))]\n    (assoc db :filtered-data filtered-data)))\n\n(defn- apply-sort [db]\n  (let [filtered-data (:filtered-data db)\n        sort-field (get-in db [:sort :field])\n        sort-direction (get-in db [:sort :direction])\n        sort-fn (if (= sort-direction :asc) identity reverse)\n        sorted-data (sort-fn (sort-by sort-field filtered-data))]\n    (assoc db :filtered-data sorted-data)))\n\n;; Events\n(rf/reg-event-db\n :initialize-db\n (fn [_ _]\n   default-db))\n\n(rf/reg-event-fx\n :load-media-data\n (fn [{:keys [db]} _]\n   {:http-xhrio {:method :get\n                 :uri \"out2.yaml\"\n                 :response-format (ajax/text-response-format)\n                 :on-success [:load-media-data-success]\n                 :on-failure [:load-media-data-failure]}}))\n\n(rf/reg-event-db\n :load-media-data-success\n (fn [db [_ response]]\n   (try\n     (if (exists? js/jsyaml)\n       (let [parsed-data (js->clj (js/jsyaml.load response) :keywordize-keys true)]\n         (if (schema/validate-media-library parsed-data)\n           (-> db\n               (assoc :media-data parsed-data)\n               (assoc :filtered-data parsed-data)\n               (assoc :loading? false)\n               (dissoc :error))\n           (assoc db \n                  :error \"Invalid data format\"\n                  :loading? false)))\n       (assoc db \n              :error \"YAML parser not available\"\n              :loading? false))\n     (catch js/Error e\n       (assoc db \n              :error (str \"Failed to parse YAML: \" (.-message e))\n              :loading? false)))))\n\n(rf/reg-event-db\n :load-media-data-failure\n (fn [db [_ error]]\n   (-> db\n       (assoc :error \"Failed to load media data\")\n       (assoc :loading? false))))\n\n(rf/reg-event-db\n :set-search-filter\n (fn [db [_ search-term]]\n   (let [new-db (assoc-in db [:filters :search] search-term)]\n     (apply-filters new-db))))\n\n(rf/reg-event-db\n :set-media-type-filter\n (fn [db [_ media-type]]\n   (let [new-db (assoc-in db [:filters :media-type] media-type)]\n     (apply-filters new-db))))\n\n(rf/reg-event-db\n :set-author-filter\n (fn [db [_ author]]\n   (let [new-db (assoc-in db [:filters :author] author)]\n     (apply-filters new-db))))\n\n(rf/reg-event-db\n :toggle-tag-filter\n (fn [db [_ tag]]\n   (let [current-tags (get-in db [:filters :tags])\n         new-tags (if (some #(= % tag) current-tags)\n                    (remove #(= % tag) current-tags)\n                    (conj current-tags tag))\n         new-db (assoc-in db [:filters :tags] new-tags)]\n     (apply-filters new-db))))\n\n(rf/reg-event-db\n :clear-filters\n (fn [db _]\n   (let [new-db (assoc db :filters {:search \"\"\n                                    :media-type \"\"\n                                    :author \"\"\n                                    :tags []\n                                    :year-min nil\n                                    :year-max nil})]\n     (apply-filters new-db))))\n\n(rf/reg-event-db\n :set-sort\n (fn [db [_ field]]\n   (let [current-field (get-in db [:sort :field])\n         current-direction (get-in db [:sort :direction])\n         new-direction (if (= field current-field)\n                         (if (= current-direction :asc) :desc :asc)\n                         :asc)\n         new-db (-> db\n                    (assoc-in [:sort :field] field)\n                    (assoc-in [:sort :direction] new-direction))]\n     (apply-sort new-db))))\n\n(rf/reg-event-db\n :set-view-mode\n (fn [db [_ mode]]\n   (assoc db :view-mode mode)))"]}