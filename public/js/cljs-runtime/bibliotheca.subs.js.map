{"version":3,"sources":["bibliotheca/subs.cljs"],"mappings":";AAGA,2DAAA,3DAACA,+KAEA,WAAKC;AAAL,AACE,OAAA,gGAAaA;;AAEhB,2DAAA,3DAACD,mLAEA,WAAKC;AAAL,AACE,OAAA,oGAAgBA;;AAEnB,2DAAA,3DAACD,0KAEA,WAAKC;AAAL,AACE,OAAA,2FAAWA;;AAEd,2DAAA,3DAACD,oKAEA,WAAKC;AAAL,AACE,OAAA,qFAAQA;;AAEX,2DAAA,3DAACD,uKAEA,WAAKC;AAAL,AACE,OAAA,wFAAUA;;AAEb,2DAAA,3DAACD,mLAEA,WAAKC;AAAL,AACE,yDAAA,mFAAA,0DAAA,/LAACC,+CAAOD;;AAEX,2DAAA,3DAACD,2LAEA,WAAKC;AAAL,AACE,yDAAA,mFAAA,0DAAA,/LAACC,+CAAOD;;AAEX,2DAAA,3DAACD,qLAEA,WAAKC;AAAL,AACE,yDAAA,mFAAA,0DAAA,/LAACC,+CAAOD;;AAEX,2DAAA,3DAACD,gLAEA,WAAKC;AAAL,AACE,yDAAA,mFAAA,0DAAA,/LAACC,+CAAOD;;AAEX,2DAAA,3DAACD,iKAEA,WAAKC;AAAL,AACE,OAAA,kFAAOA;;AAEV,2DAAA,3DAACD,4KAEA,WAAKC;AAAL,AACE,OAAA,6FAAYA;;AAEf,2DAAA,yIAAA,gDAAA,mFAAA,vUAACD,iZAGA,WAAKG;AAAL,AACE,oDAAA,iOAAKA,1GACA,4CAAA,5CAACC,tEACD,AAACC,+CAAOC,hGACRC,7CACAC;;AAER,2DAAA,gIAAA,gDAAA,mFAAA,9TAACR,wYAGA,WAAKG;AAAL,AACE,oDAAA,4NAAKA,rGACA,4CAAA,5CAACC,tEACD,AAACC,+CAAOC,hGACRC,7CACAC;;AAER,2DAAA,2HAAA,gDAAA,mFAAA,zTAACR,mYAGA,WAAKG;AAAL,AACE,oDAAA,8MAAKA,7JACA,sDAAA,tDAACM,jDACDF,7CACAC;;AAER,2DAAA,wHAAA,gDAAA,mFAAA,tTAACR,oYAGA,WAAKU;AAAL,AACE,OAACC,gBAAMD;;AAEV,2DAAA,sHAAA,gDAAA,mFAAA,pTAACV,8XAGA,WAAKG;AAAL,AACE,OAACQ,gBAAMR","names":["re_frame.core.reg_sub","db","cljs.core.get_in","media-data","cljs.core.map","cljs.core.remove","cljs.core/empty?","cljs.core.distinct","cljs.core.sort","cljs.core.mapcat","filtered-data","cljs.core/count"],"sourcesContent":["(ns bibliotheca.subs\n  (:require [re-frame.core :as rf]))\n\n(rf/reg-sub\n :media-data\n (fn [db]\n   (:media-data db)))\n\n(rf/reg-sub\n :filtered-data\n (fn [db]\n   (:filtered-data db)))\n\n(rf/reg-sub\n :loading?\n (fn [db]\n   (:loading? db)))\n\n(rf/reg-sub\n :error\n (fn [db]\n   (:error db)))\n\n(rf/reg-sub\n :filters\n (fn [db]\n   (:filters db)))\n\n(rf/reg-sub\n :search-filter\n (fn [db]\n   (get-in db [:filters :search])))\n\n(rf/reg-sub\n :media-type-filter\n (fn [db]\n   (get-in db [:filters :media-type])))\n\n(rf/reg-sub\n :author-filter\n (fn [db]\n   (get-in db [:filters :author])))\n\n(rf/reg-sub\n :tag-filters\n (fn [db]\n   (get-in db [:filters :tags])))\n\n(rf/reg-sub\n :sort\n (fn [db]\n   (:sort db)))\n\n(rf/reg-sub\n :view-mode\n (fn [db]\n   (:view-mode db)))\n\n(rf/reg-sub\n :available-media-types\n :<- [:media-data]\n (fn [media-data]\n   (->> media-data\n        (map :mediaType)\n        (remove empty?)\n        distinct\n        sort)))\n\n(rf/reg-sub\n :available-authors\n :<- [:media-data]\n (fn [media-data]\n   (->> media-data\n        (map :author)\n        (remove empty?)\n        distinct\n        sort)))\n\n(rf/reg-sub\n :available-tags\n :<- [:media-data]\n (fn [media-data]\n   (->> media-data\n        (mapcat :tags)\n        distinct\n        sort)))\n\n(rf/reg-sub\n :results-count\n :<- [:filtered-data]\n (fn [filtered-data]\n   (count filtered-data)))\n\n(rf/reg-sub\n :total-count\n :<- [:media-data]\n (fn [media-data]\n   (count media-data)))"]}